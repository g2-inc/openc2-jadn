syntax = "proto3";

package openc2;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// Records
message OpenC2Command { // Communicates an action to be performed on a target and may include information identifying the actuator(s) to execute the command
    string id = 1; // Identifier used to link responses to a command
    Action action = 2; // The task or activity to be performed (i.e., the 'verb')
    Target target = 3; // The object of the action. The action is performed on the target
    Actuator actuator = 4; // The subject of the action. The actuator executes the action on the target
    CommandOptions options = 5; // Additional information that applies to the command
}

message OpenC2Response {
    string id = 1; // Command that induced this response
    StatusCode status = 2; // Adapted from HTTP Status Codes, RFC 7231
    string status_text = 3; // Status description
    repeated Results results = 4;
    // repeated google.protobuf.Any details = 4; // Results of executing the command
}

message Media {
    string media_type = 1; // Media Type (formerly MIME Type), RFC 6838"],
    Payload payload = 2; // Content or URI
}

message ActuatorSpecifiers {
    string actuator_id = 1;
    string asset_id = 2;
}

message Artifact {
    string mime_type = 1;
    google.protobuf.Any payload = 2; // choice of literal content or URL to obtain content
    hashes hashes = 3; // Specifies a dictionary of hashes for the contents of the payload
}

message IP_Connection { // 5-tuple that specifies a tcp/ip connection
    string src_addr = 1; // source address
    string src_port = 2; // source TCP/UDP port number
    string dst_addr = 3; //destination address
    string dst_port = 4; // destination TCP/UDP port number
    Layer4Protocol layer4_protocol = 5; // Protocol (IPv4) / Next Header (IPv6)
}

// Choice
message Results {
    oneof results {
        string string = 1; // List of strings - how??
        Media media = 2; // Media type and data
    }
}

message Target {
    oneof target { // OpenC2 Target datatypes
        string artifact = 1; // An array of bytes representing a file-like object or a link to that object
        string command = 2; // A reference to a previously issued OpenC2 command
        string device = 3;
        string directory = 4;
        string disk = 5;
        string disk_partition = 6;
        string domain_name = 7;
        string email_addr = 8;
        string email_message = 9;
        string file = 10;
        string ipv4_addr = 11;
        string ipv6_addr = 12;
        string mac_addr = 13;
        string memory = 14;
        IP_Connection ip_connection = 15;
        OpenC2 openc2 = 16; // query actuator for supported capabilities, negotiate connection
        string process = 17;
        string software = 18;
        string uri = 19;
        string user_account = 20;
        string user_session = 21;
        string volume = 22;
        string windows_registry_key = 23;
        string x509_certificate = 24;
    }
}

message Actuator {
    oneof actuator {
        ActuatorSpecifiers any = 1;
        ActuatorSpecifiers firewall = 2;
    }
}

message Payload {
    oneof payload {
        string payload_bin = 1; // binary - Specifies the data contained in the artifact
        string url = 2; // MUST be a valid URL that resolves to the un-encoded content
    }
}

message OpenC2 {
    oneof openc2 { // A target used to query Actuator for its supported capabilities
        string actions = 1; // query: Results = JSON array of supported action verbs
        string schema = 2; // query: Results = JADN syntax of supported commands
        string actuator_groups = 3; // query: Results = JSON array of actuator group names
    }
}

// Maps
message CommandOptions {
    google.protobuf.Timestamp start_time = 1; // universal
    google.protobuf.Timestamp end_time = 2; // universal
    int64 dutartion = 3; // pause, delay
    ResponseType response_requested = 4; // Type of response required for the action
    string command_id = 5; // universal  (was "id")
}

message hashes { // all binary data ??
    string MD5 = 1; // MD5 message digest as defined in RFC3121
    string MD6 = 2; // MD6 message digest as defined in MD6 proposal
    string RIPEMD_160 = 3; // RACE Integrity Primitives Evaluation Message as defined in RIPEMD-160 specification
    string SHA_1 = 4; // Secure Hash Algorithm (SHA)-1 as defined in RFC3174
    string SHA_224 = 5; // SHA-224 as defined in RFC6234 (US Secure Hash Algorithms)
    string SHA_256 = 6; // SHA-256 as defined in RFC6234
    string SHA_384 = 7; // SHA-384 as defined in RFC6234
    string SHA_512 = 8; // SHA-512 as defined in RFC6234
    string SHA3_224 = 9; // SHA3-224 as defined in FIPS PUP 202
    string SHA3_256 = 10; // SHA3-256 as defined in FIPS PUP 202
    string SHA3_384 = 11; // SHA3-384 as defined in FIPS PUP 202
    string SHA3_512 = 12; // SHA3-512 as defined in FIPS PUP 202
    string ssdeep = 13; // ssdeep fuzzy hashing algorithm as defined in the SSDEEP specification
    string WHIRLPOOL = 14; // whirlpool cryptographic hash function as defined in ISO/IEC 10118-3:2004
}

message device { // TODO: Add inventory device-id?
    string description = 1;
    string device_type = 2;
    string manufacturer = 3;
    string model = 4;
    string serial_number = 5;
    string firmware_version = 6;
    string system_details = 7;
}

message file {
    string name = 1;
    string path = 2;
    hashes hash = 3;
    Reputation reputation = 4;
}

// Enum
enum Action {
    UnknownAction = 0; // required starting number for protobuf3
    Scan = 1; // Systematic examination of some aspect of the target entity or its environment in order to obtain information
    Locate = 2; // Find the target object physically, logically, functionally, or by organization
    Query = 3; // Initiate a request for information
    Report = 4; // Task an entity to provide information to a designated recipient
    Notify = 5; // Set an entity's alerting preferences
    Deny = 6; // Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access
    Contain = 7; // Isolate a file, process, or entity so that it cannot modify or access other assets or processes
    Allow = 8; // Permit access to or execution of a target
    Start = 9; // Initiate a process, application, system, or activity
    Stop = 10; // Halt a system or end an activity
    Restart = 11; // Stop then start a system or activity
    Pause = 12; // Cease a system or activity while maintaining state
    Resume = 13; // Start a system or activity from a paused state
    cancel = 14; // Invalidate a previous action
    Set = 15; // Change a value, configuration, or state of a managed entity
    Update = 16; // Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update
    Move = 17; // Change the location of a file, subnet, network, or process
    Redirect = 18; // Change the flow of traffic to a destination other than its original destination
    Create = 19; // Add a new entity of a known type (e.g., data, files, directories)
    Delete = 20; // Remove an entity (e.g., data, files, flows)
    Snapshot = 21; // Record and store the state of a target at an instant in time
    Detonate = 22; // Execute and observe the behavior of a target (e.g., file, hyperlink) in an isolated environment
    Restore = 23; // Return the system to a previously known state
    Save = 24; // Commit data or system state to memory
    Throttle = 25; // Adjust the rate of a process, function, or activity
    Delay = 26; // Stop or hold up an activity or data transmittal
    Substitute = 27; // Replace all or part of the data, content or payload
    Copy = 28; // Duplicate a file or data flow
    Sync = 29; // Synchronize a sensor or actuator with other system components
    Investigate = 30; // Task the recipient to aggregate and report information as it pertains to a security event or incident
    Mitigate = 31; // Task the recipient to circumvent a problem without necessarily eliminating the vulnerability or attack point
    Remediate = 32; // Task the recipient to eliminate a vulnerability or attack point
}

enum ResponseType {
    UnknownResponse = 0; // required starting number for protobuf3
    Ack = 1;
    Status = 2;
}

enum StatusCode {
    UnknownStatus = 0; // required starting number for protobuf3
    Processing = 102; // an interim response used to inform the client that the server has accepted the request but not yet completed it
    OK = 200; // the request has succeeded
    MovedPermanently = 301; // the target resource has been assigned a new permanent URI
    BadRequest = 400; // the server cannot process the request due to something that is perceived to be a client error (e.g., malformed request syntax.)
    Unauthorized = 401; // the request lacks valid authentication credentials for the target resources or authorization has been refused for the submitted credentials
    Forbidden = 403; // the server understood the request but refuses to authorize it
    ServerError = 500; // the server encountered an unexpected condition that prevented it from fulfilling the request
    NotImplemented = 501; // the server does not support the functionality required to fulfill the request
}

enum Reputation {
    NotSet = 0;
    Benign = 1;
    LikelyBenign = 2;
    PossiblyBenign = 3;
    Indeterminate = 4;
    PossiblyMalicious = 5;
    LikelyMalicious = 6;
    KnownMalicious = 7;
}

enum Layer4Protocol {
    Unknown4Protocol = 0; // required starting number for protobuf3
    ICMP = 1; // Internet Control Message Protocol - RFC 792
    TCP = 6; // Transmission Control Protocol - RFC 793
    UDP = 17; // User Datagram Protocol - RFC 768
    SCTP = 132; // Stream Control Transmission Protocol - RFC 4960
}

enum Layer7Protocol {
    Unknown7Protocol = 0; // required starting number for protobuf3
    FTP_DATA = 20; // File Transfer Protocol (data)
    FTP = 21; // File Transfer Protocol (control)
    SSH = 22; // Secure Shell Protocol
    Telnet = 23; // Telnet
    SMTP = 25; // Simple Mail Transfer Protocol
    HTTP = 80; // Hypertext Transport Protocol
    HTTPS = 443; // HTTP over TLS
}

/**
{
 "types": [
  ["Command-ID", "String", [], "Uniquely identifies a particular command - TBD syntax"],
  ["date-time", "String", ["@date-time"], "RFC 3339 date-time"],
  ["duration", "String", ["@duration"], "RFC 3339 / ISO 8601 duration"],
  ["domain-name", "String", ["@hostname"], "Domain name, RFC 1034, section 3.5"],
  ["email-addr", "String", ["@email"], "Email address, RFC 5322, section 3.4.1"],
  ["ip-addr", "String", ["@ip"], "IPv4 or IPv6 address"],
  ["ipv4-addr", "String", ["@ipv4"], "IPv4 address or range in CIDR notation, RFC 2673, section 3.2"],
  ["ipv6-addr", "String", ["@ipv6"], "IPv6 address or range, RFC 4291, section 2.2"],
  ["mac-addr", "String", ["@mac"], "48 bit Media Access Code address"],
  ["port", "String", ["@port"], "Service Name or Transport Protocol Port Number, RFC 6335"],
  ["version", "String", [], "Version string - TBD syntax"],
  ["uri", "String", ["@uri"], "Uniform Resource Identifier"]
  ]
}
*/