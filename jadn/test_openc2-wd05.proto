syntax = "proto3";

package openc2;

/* meta
 * version - wd05
 * description - Datatypes that define the content of OpenC2 commands and responses.
 * module - openc2
 * title - OpenC2 Command Definitions
*/

import "google/protobuf/timestamp.proto";

message OpenC2_Command { // Communicates an action to be performed on a target and may include information identifying the actuator(s) to execute the command. #jadn_opts:{"type": "Record"}
  string id = 1; // Identifier used to link responses to a command #jadn_opts:{"type": "command-id"}
  Action action = 2; // The task or activity to be performed (i.e., the 'verb') #jadn_opts:{"type": "Action"}
  Target target = 3; // The object of the action. The action is performed on the target #jadn_opts:{"type": "Target"}
  Actuator actuator = 4; // The subject of the action. The actuator executes the action on the target #jadn_opts:{"type": "Actuator", "options": ["[0"]}
  Command_Options options = 5; // Additional information that applies to the command #jadn_opts:{"type": "Command-Options", "options": ["[0"]}
}

message OpenC2Response { // #jadn_opts:{"type": "Record"}
  string id = 1; // Command that induced this response #jadn_opts:{"type": "command-id"}
  Status_Code status = 2; // Adapted from HTTP Status Codes, RFC 7231 #jadn_opts:{"type": "Status-Code"}
  string status_text = 3; // Status description #jadn_opts:{"type": "String", "options": ["[0"]}
  Results unknown = 4; // Results of executing the command #jadn_opts:{"type": "Results"}
}

message Results {
  oneof Results { // #jadn_opts:{"type": "Choice"}
    string string = 1; // List of strings #jadn_opts:{"type": "String", "options": ["[0", "]0"]}
    Media media = 2; // Media type and data #jadn_opts:{"type": "Media"}
  }
}

message Media { // #jadn_opts:{"type": "Record"}
  string media_type = 1; // Media Type (formerly MIME Type), RFC 6838 #jadn_opts:{"type": "String"}
  payload data = 2; // Content or URI #jadn_opts:{"type": "payload"}
}

enum Action { // #jadn_opts:{"type": "Enumerated"}
  Unknown_Action = 0; // required starting enum number for protobuf3
  scan = 1; // Systematic examination of some aspect of the target entity or its environment in order to obtain information.
  locate = 2; // Find the target object physically, logically, functionally, or by organization.
  query = 3; // Initiate a request for information.
  report = 4; // Task an entity to provide information to a designated recipient.
  notify = 5; // Set an entity's alerting preferences.
  deny = 6; // Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access.
  contain = 7; // Isolate a file, process, or entity so that it cannot modify or access other assets or processes.
  allow = 8; // Permit access to or execution of a target.
  start = 9; // Initiate a process, application, system, or activity.
  stop = 10; // Halt a system or end an activity.
  restart = 11; // Stop then start a system or activity.
  pause = 12; // Cease a system or activity while maintaining state.
  resume = 13; // Start a system or activity from a paused state.
  cancel = 14; // Invalidate a previous action.
  set = 15; // Change a value, configuration, or state of a managed entity.
  update = 16; // Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update.
  move = 17; // Change the location of a file, subnet, network, or process.
  redirect = 18; // Change the flow of traffic to a destination other than its original destination.
  create = 19; // Add a new entity of a known type (e.g., data, files, directories).
  delete = 20; // Remove an entity (e.g., data, files, flows.
  snapshot = 21; // Record and store the state of a target at an instant in time.
  detonate = 22; // Execute and observe the behavior of a target (e.g., file, hyperlink) in an isolated environment.
  restore = 23; // Return the system to a previously known state.
  save = 24; // Commit data or system state to memory.
  throttle = 25; // Adjust the rate of a process, function, or activity.
  delay = 26; // Stop or hold up an activity or data transmittal.
  substitute = 27; // Replace all or part of the data, content or payload.
  copy = 28; // Duplicate a file or data flow.
  sync = 29; // Synchronize a sensor or actuator with other system components.
  investigate = 30; // Task the recipient to aggregate and report information as it pertains to a security event or incident.
  mitigate = 31; // Task the recipient to circumvent a problem without necessarily eliminating the vulnerability or attack point.
  remediate = 32; // Task the recipient to eliminate a vulnerability or attack point.
}

message Target {
  oneof Target { // OpenC2 Target datatypes #jadn_opts:{"type": "Choice"}
    artifact artifact = 1; // An array of bytes representing a file-like object or a link to that object. #jadn_opts:{"type": "artifact"}
    string command = 2; // A reference to a previously issued OpenC2 command #jadn_opts:{"type": "command-id"}
    device device = 3; // #jadn_opts:{"type": "device"}
    string directory = 4; // #jadn_opts:{"type": "directory"}
    string disk = 5; // #jadn_opts:{"type": "disk"}
    string disk_partition = 6; // #jadn_opts:{"type": "disk-partition"}
    string domain_name = 7; // #jadn_opts:{"type": "domain-name"}
    string email_addr = 8; // #jadn_opts:{"type": "email-addr"}
    string email_message = 9; // #jadn_opts:{"type": "email-message"}
    file file = 10; // #jadn_opts:{"type": "file"}
    string ipv4_addr = 11; // #jadn_opts:{"type": "ipv4-addr"}
    string ipv6_addr = 12; // #jadn_opts:{"type": "ipv6-addr"}
    string mac_addr = 13; // #jadn_opts:{"type": "mac-addr"}
    string memory = 14; // #jadn_opts:{"type": "memory"}
    ip_connection ip_connection = 15; // #jadn_opts:{"type": "ip-connection"}
    openc2 openc2 = 16; // OpenC2 - query actuator for supported capabilities, negotiate connection #jadn_opts:{"type": "openc2"}
    string process = 17; // #jadn_opts:{"type": "process"}
    string software = 18; // #jadn_opts:{"type": "software"}
    string uri = 19; // #jadn_opts:{"type": "uri"}
    string user_account = 20; // #jadn_opts:{"type": "user-account"}
    string user_session = 21; // #jadn_opts:{"type": "user-session"}
    string volume = 22; // #jadn_opts:{"type": "volume"}
    string windows_registry_key = 23; // #jadn_opts:{"type": "windows-registry-key"}
    string x509_certificate = 24; // #jadn_opts:{"type": "x509-certificate"}
  }
}

message Actuator {
  oneof Actuator { // #jadn_opts:{"type": "Choice"}
    ActuatorSpecifiers any = 1; // #jadn_opts:{"type": "ActuatorSpecifiers"}
    ActuatorSpecifiers firewall = 2; // #jadn_opts:{"type": "ActuatorSpecifiers"}
  }
}

message ActuatorSpecifiers { // #jadn_opts:{"type": "Record"}
  string actuator_id = 1; // #jadn_opts:{"type": "uri", "options": ["[0"]}
  string asset_id = 2; // #jadn_opts:{"type": "String", "options": ["[0"]}
}

message Command_Options { // #jadn_opts:{"type": "Map"}
  google.protobuf.Timestamp start_time = 1; // universal #jadn_opts:{"type": "date-time", "options": ["[0"]}
  google.protobuf.Timestamp end_time = 2; // universal #jadn_opts:{"type": "date-time", "options": ["[0"]}
  string duration = 3; // pause, delay #jadn_opts:{"type": "duration", "options": ["[0"]}
  response_type response_requested = 4; // Type of response required for the action #jadn_opts:{"type": "response-type", "options": ["[0"]}
  string command_id = 5; // universal  (was "id") #jadn_opts:{"type": "command-id", "options": ["[0"]}
}

enum response_type { // #jadn_opts:{"type": "Enumerated"}
  Unknown_response_type = 0; // required starting enum number for protobuf3
  ack = 1;
  status = 2;
}

enum Status_Code { // #jadn_opts:{"type": "Enumerated", "options": ["="]}
  Unknown_Status_Code = 0; // required starting enum number for protobuf3
  Unknown_Status_Code_102 = 102; // Processing - an interim response used to inform the client that the server has accepted the request but not yet completed it.
  Unknown_Status_Code_200 = 200; // OK - the request has succeeded.
  Unknown_Status_Code_301 = 301; // Moved Permanently - the target resource has been assigned a new permanent URI
  Unknown_Status_Code_400 = 400; // Bad Request - the server cannot process the request due to something that is perceived to be a client error (e.g., malformed request syntax.)
  Unknown_Status_Code_401 = 401; // Unauthorized - the request lacks valid authentication credentials for the target resources or authorization has been refused for the submitted credentials.
  Unknown_Status_Code_403 = 403; // Forbidden - the server understood the request but refuses to authorize it.
  Unknown_Status_Code_500 = 500; // Server Error - the server encountered an unexpected condition that prevented it from fulfilling the request.
  Unknown_Status_Code_501 = 501; // Not Implemented - the server does not support the functionality required to fulfill the request.
}

message hashes { // Hash values #jadn_opts:{"type": "Map"}
  string MD5 = 1; // MD5 message digest as defined in RFC3121 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string MD6 = 2; // MD6 message digest as defined in MD6 proposal #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string RIPEMD_160 = 3; // RACE Integrity Primitives Evaluation Message as defined in RIPEMD-160 specification #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA_1 = 4; // Secure Hash Algorithm (SHA)-1 as defined in RFC3174 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA_224 = 5; // SHA-224 as defined in RFC6234 (US Secure Hash Algorithms) #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA_256 = 6; // SHA-256 as defined in RFC6234 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA_384 = 7; // SHA-384 as defined in RFC6234 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA_512 = 8; // SHA-512 as defined in RFC6234 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA3_224 = 9; // SHA3-224 as defined in FIPS PUP 202 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA3_256 = 10; // SHA3-256 as defined in FIPS PUP 202 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA3_384 = 11; // SHA3-384 as defined in FIPS PUP 202 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string SHA3_512 = 12; // SHA3-512 as defined in FIPS PUP 202 #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string ssdeep = 13; // ssdeep fuzzy hashing algorithm as defined in the SSDEEP specification #jadn_opts:{"type": "Binary", "options": ["[0"]}
  string WHIRLPOOL = 14; // whirlpool cryptographic hash function as defined in ISO/IEC 10118-3:2004 #jadn_opts:{"type": "Binary", "options": ["[0"]}
}

message artifact { // #jadn_opts:{"type": "Record"}
  string mime_type = 1; // MUST be a valid MIME type as specified in the IANA Media Types registry #jadn_opts:{"type": "String", "options": ["[0"]}
  payload unknown = 2; // choice of literal content or URL to obtain content #jadn_opts:{"type": "payload", "options": ["[0"]}
  hashes hashes = 3; // Specifies a dictionary of hashes for the contents of the payload #jadn_opts:{"type": "hashes", "options": ["[0"]}
}

message payload {
  oneof payload { // #jadn_opts:{"type": "Choice"}
    string payload_bin = 1; // Specifies the data contained in the artifact. #jadn_opts:{"type": "Binary"}
    string url = 2; // MUST be a valid URL that resolves to the un-encoded content #jadn_opts:{"type": "uri"}
  }
}

message device { // TODO: Add inventory device-id? #jadn_opts:{"type": "Map"}
  string description = 1; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string device_type = 2; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string manufacturer = 3; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string model = 4; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string serial_number = 5; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string firmware_version = 6; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string system_details = 7; // #jadn_opts:{"type": "String", "options": ["[0"]}
}

message file { // #jadn_opts:{"type": "Map"}
  string name = 1; // #jadn_opts:{"type": "String", "options": ["[0"]}
  string path = 2; // #jadn_opts:{"type": "String", "options": ["[0"]}
  hashes hash = 3; // #jadn_opts:{"type": "hashes", "options": ["[0"]}
  reputation reputation = 4; // #jadn_opts:{"type": "reputation", "options": ["[0"]}
}

enum reputation { // #jadn_opts:{"type": "Enumerated", "options": ["="]}
  Unknown_reputation_0 = 0; // Not Set
  Unknown_reputation_1 = 1; // Benign
  Unknown_reputation_2 = 2; // Likely Benign
  Unknown_reputation_3 = 3; // Possibly Benign
  Unknown_reputation_4 = 4; // Indeterminate
  Unknown_reputation_5 = 5; // Possibly Malicious
  Unknown_reputation_6 = 6; // Likely Malicious
  Unknown_reputation_7 = 7; // Known Malicious
}

message ip_connection { // 5-tuple that specifies a tcp/ip connection #jadn_opts:{"type": "Record"}
  string src_addr = 1; // source address #jadn_opts:{"type": "ip-addr", "options": ["[0"]}
  string src_port = 2; // source TCP/UDP port number #jadn_opts:{"type": "port", "options": ["[0"]}
  string dst_addr = 3; // destination address #jadn_opts:{"type": "ip-addr", "options": ["[0"]}
  string dst_port = 4; // destination TCP/UDP port number #jadn_opts:{"type": "port", "options": ["[0"]}
  layer4_protocol layer4_protocol = 5; // Protocol (IPv4) / Next Header (IPv6) #jadn_opts:{"type": "layer4-protocol", "options": ["[0"]}
}

enum layer4_protocol { // protocol (IPv4) or next header (IPv6) field - any IANA value, RFC 5237 #jadn_opts:{"type": "Enumerated"}
  Unknown_layer4_protocol = 0; // required starting enum number for protobuf3
  icmp = 1; // Internet Control Message Protocol - RFC 792
  tcp = 6; // Transmission Control Protocol - RFC 793
  udp = 17; // User Datagram Protocol - RFC 768
  sctp = 132; // Stream Control Transmission Protocol - RFC 4960
}

enum layer7_protocol { // Service Name and Transport Protocol Port - any IANA value, RFC 6335 #jadn_opts:{"type": "Enumerated"}
  Unknown_layer7_protocol = 0; // required starting enum number for protobuf3
  ftp_data = 20; // File Transfer Protocol (data)
  ftp = 21; // File Transfer Protocol (control)
  ssh = 22; // Secure Shell Protocol
  telnet = 23; // Telnet
  smtp = 25; // Simple Mail Transfer Protocol
  http = 80; // Hypertext Transport Protocol
  https = 443; // HTTP over TLS
}

message openc2 {
  oneof openc2 { // A target used to query Actuator for its supported capabilities #jadn_opts:{"type": "Choice"}
    string actions = 1; // query: Results = JSON array of supported action verbs #jadn_opts:{"type": "Null"}
    string schema = 2; // query: Results = JADN syntax of supported commands #jadn_opts:{"type": "Null"}
    string actuator_groups = 3; // query: Results = JSON array of actuator group names #jadn_opts:{"type": "Null"}
  }
}

/* JADN Custom Fields
[
  ['command-id', 'String', [], 'Uniquely identifies a particular command - TBD syntax'],
  ['date-time', 'String', ['@date-time'], 'RFC 3339 date-time'],
  ['duration', 'String', ['@duration'], 'RFC 3339 / ISO 8601 duration'],
  ['domain-name', 'String', ['@hostname'], 'Domain name, RFC 1034, section 3.5'],
  ['email-addr', 'String', ['@email'], 'Email address, RFC 5322, section 3.4.1'],
  ['ip-addr', 'String', ['@ip'], 'IPv4 or IPv6 address'],
  ['ipv4-addr', 'String', ['@ipv4'], 'IPv4 address or range in CIDR notation, RFC 2673, section 3.2'],
  ['ipv6-addr', 'String', ['@ipv6'], 'IPv6 address or range, RFC 4291, section 2.2'],
  ['mac-addr', 'String', ['@mac'], '48 bit Media Access Code address'],
  ['port', 'String', ['@port'], 'Service Name or Transport Protocol Port Number, RFC 6335'],
  ['version', 'String', [], 'Version string - TBD syntax'],
  ['uri', 'String', ['@uri'], 'Uniform Resource Identifier']
]
*/