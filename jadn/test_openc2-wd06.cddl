; module - oasis-open.org/openc2/v1.0/openc2-lang
; title - OpenC2 Language Objects
; version - wd06
; description - Datatypes that define the content of OpenC2 commands and responses.
; imports - [['slpff', 'oasis-open.org/openc2/v1.0/ap-slpff'], ['jadn', 'oasis-open.org/openc2/v1.0/jadn']]
; exports - ['OpenC2-Command', 'OpenC2-Response', 'OpenC2-Message']


OpenC2_Command = { ; The OpenC2 Command describes an action performed on a target. It can be directive or descriptive depending on the context. #jadn_opts:{"type": "Record"}
  action: Action, ; The task or activity to be performed (i.e., the 'verb') #jadn_opts:{"type": "Action", "field": 1}
  target: Target, ; The object of the action. The action is performed on the target #jadn_opts:{"type": "Target", "field": 2}
  ? actuator: Actuator, ; The subject of the action. The actuator executes the action on the target #jadn_opts:{"type": "Actuator", "field": 3, "options": {"min": 0}}
  ? args: Args, ; Additional information that applies to the command #jadn_opts:{"type": "Args", "field": 4, "options": {"min": 0}}
  ? id: command_id ; Identifier used to link responses to a command #jadn_opts:{"type": "command-id", "field": 5, "options": {"min": 0}}
}

; #jadn_opts:{"type": "Enumerated"}
Action = "scan" ; Systematic examination of some aspect of the target entity or its environment in order to obtain information. #jadn_opts:{"field": 1}
Action /= "locate" ; Find the target object physically, logically, functionally, or by organization. #jadn_opts:{"field": 2}
Action /= "query" ; Initiate a request for information. #jadn_opts:{"field": 3}
Action /= "report" ; Task an entity to provide information to a designated recipient. #jadn_opts:{"field": 4}
Action /= "notify" ; Set an entity's alerting preferences. #jadn_opts:{"field": 5}
Action /= "deny" ; Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access. #jadn_opts:{"field": 6}
Action /= "contain" ; Isolate a file, process, or entity so that it cannot modify or access other assets or processes. #jadn_opts:{"field": 7}
Action /= "allow" ; Permit access to or execution of a target. #jadn_opts:{"field": 8}
Action /= "start" ; Initiate a process, application, system, or activity. #jadn_opts:{"field": 9}
Action /= "stop" ; Halt a system or end an activity. #jadn_opts:{"field": 10}
Action /= "restart" ; Stop then start a system or activity. #jadn_opts:{"field": 11}
Action /= "pause" ; Cease a system or activity while maintaining state. #jadn_opts:{"field": 12}
Action /= "resume" ; Start a system or activity from a paused state. #jadn_opts:{"field": 13}
Action /= "cancel" ; Invalidate a previously issued action. #jadn_opts:{"field": 14}
Action /= "set" ; Change a value, configuration, or state of a managed entity. #jadn_opts:{"field": 15}
Action /= "update" ; Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update. #jadn_opts:{"field": 16}
Action /= "move" ; Change the location of a file, subnet, network, or process. #jadn_opts:{"field": 17}
Action /= "redirect" ; Change the flow of traffic to a destination other than its original destination. #jadn_opts:{"field": 18}
Action /= "create" ; Add a new entity of a known type (e.g., data, files, directories). #jadn_opts:{"field": 19}
Action /= "delete" ; Remove an entity (e.g., data, files, flows. #jadn_opts:{"field": 20}
Action /= "snapshot" ; Record and store the state of a target at an instant in time. #jadn_opts:{"field": 21}
Action /= "detonate" ; Execute and observe the behavior of a target (e.g., file, hyperlink) in an isolated environment. #jadn_opts:{"field": 22}
Action /= "restore" ; Return the system to a previously known state. #jadn_opts:{"field": 23}
Action /= "save" ; Commit data or system state to memory. #jadn_opts:{"field": 24}
Action /= "throttle" ; Adjust the rate of a process, function, or activity. #jadn_opts:{"field": 25}
Action /= "delay" ; Stop or hold up an activity or data transmittal. #jadn_opts:{"field": 26}
Action /= "substitute" ; Replace all or part of the data, content or payload. #jadn_opts:{"field": 27}
Action /= "copy" ; Duplicate a file or data flow. #jadn_opts:{"field": 28}
Action /= "sync" ; Synchronize a sensor or actuator with other system components. #jadn_opts:{"field": 29}
Action /= "investigate" ; Task the recipient to aggregate and report information as it pertains to a security event or incident. #jadn_opts:{"field": 30}
Action /= "mitigate" ; Task the recipient to circumvent a problem without necessarily eliminating the vulnerability or attack point. #jadn_opts:{"field": 31}
Action /= "remediate" ; Task the recipient to eliminate a vulnerability or attack point. #jadn_opts:{"field": 32}

Target = ( ; OpenC2 Target datatypes #jadn_opts:{"type": "Choice"}
  artifact: artifact // ; An array of bytes representing a file-like object or a link to that object. #jadn_opts:{"type": "artifact", "field": 1}
  command: command_id // ; A reference to a previously issued OpenC2 command #jadn_opts:{"type": "command-id", "field": 2}
  device: device // ; #jadn_opts:{"type": "device", "field": 3}
  directory: bstr // ; #jadn_opts:{"type": "directory", "field": 4}
  disk: bstr // ; #jadn_opts:{"type": "disk", "field": 5}
  disk_partition: bstr // ; #jadn_opts:{"type": "disk-partition", "field": 6}
  domain_name: domain_name // ; #jadn_opts:{"type": "domain-name", "field": 7}
  email_addr: email_addr // ; #jadn_opts:{"type": "email-addr", "field": 8}
  email_message: bstr // ; #jadn_opts:{"type": "email-message", "field": 9}
  file: file // ; #jadn_opts:{"type": "file", "field": 10}
  ipv4_addr: ipv4_addr // ; #jadn_opts:{"type": "ipv4-addr", "field": 11}
  ipv6_addr: ipv6_addr // ; #jadn_opts:{"type": "ipv6-addr", "field": 12}
  mac_addr: mac_addr // ; #jadn_opts:{"type": "mac-addr", "field": 13}
  memory: bstr // ; #jadn_opts:{"type": "memory", "field": 14}
  ip_connection: ip_connection // ; #jadn_opts:{"type": "ip-connection", "field": 15}
  openc2: openc2 // ; OpenC2 - query actuator for supported capabilities, negotiate connection #jadn_opts:{"type": "openc2", "field": 16}
  process: bstr // ; #jadn_opts:{"type": "process", "field": 17}
  software: bstr // ; #jadn_opts:{"type": "software", "field": 18}
  uri: uri // ; #jadn_opts:{"type": "uri", "field": 19}
  user_account: bstr // ; #jadn_opts:{"type": "user-account", "field": 20}
  user_session: bstr // ; #jadn_opts:{"type": "user-session", "field": 21}
  volume: bstr // ; #jadn_opts:{"type": "volume", "field": 22}
  windows_registry_key: bstr // ; #jadn_opts:{"type": "windows-registry-key", "field": 23}
  x509_certificate: bstr // ; #jadn_opts:{"type": "x509-certificate", "field": 24}
  slpff: bstr ; Targets defined in the Stateless Packet Filter Firewall profile #jadn_opts:{"type": "Slpff-Targets", "field": 1024}
)

Actuator = ( ; #jadn_opts:{"type": "Choice"}
  slpff: bstr ; Specifiers as defined in the Stateless Packet Filtering Firewall profile, oasis-open.org/openc2/v1.0/ap-slpff #jadn_opts:{"type": "Slpff-Specifiers", "field": 1024}
)

Args = [ ; #jadn_opts:{"type": "Map"}
  ? start_time: date_time, ; The specific date/time to initiate the action #jadn_opts:{"type": "date-time", "field": 1, "options": {"min": 0}}
  ? end_time: date_time, ; The specific date/time to terminate the action #jadn_opts:{"type": "date-time", "field": 2, "options": {"min": 0}}
  ? duration: duration, ; The length of time for an action to be in effect #jadn_opts:{"type": "duration", "field": 3, "options": {"min": 0}}
  ? response_requested: Response_Type, ; The type of response required for the action #jadn_opts:{"type": "Response-Type", "field": 4, "options": {"min": 0}}
  ? slpff: bstr ; Command arguments defined in the Stateless Packet Filtering Firewall profile #jadn_opts:{"type": "Slpff-Args", "field": 1024, "options": {"min": 0}}
]

OpenC2_Response = { ; #jadn_opts:{"type": "Record"}
  id: command_id, ; Id of the ommand that induced this response #jadn_opts:{"type": "command-id", "field": 1}
  status: Status_Code, ; An integer status code #jadn_opts:{"type": "Status-Code", "field": 2}
  ? status_text: bstr, ; A free-form human-readable description of the response status #jadn_opts:{"type": "String", "field": 3, "options": {"min": 0}}
  unknown: Results ; Data or extended status information that was requested from an OpenC2 command #jadn_opts:{"type": "Results", "field": 4}
}

Results = ( ; #jadn_opts:{"type": "Choice"}
  string: bstr // ; List of strings #jadn_opts:{"type": "String", "field": 1, "options": {"min": 0, "max": 0}}
  media: bstr ; Media type and data #jadn_opts:{"type": "Media", "field": 2}
)

; #jadn_opts:{"type": "Enumerated", "options": {"compact": true}}
Status_Code = "Unknown_Status_Code_102" ; Processing - an interim response used to inform the client that the server has accepted the request but not yet completed it. #jadn_opts:{"field": 102}
Status_Code /= "Unknown_Status_Code_200" ; OK - the request has succeeded. #jadn_opts:{"field": 200}
Status_Code /= "Unknown_Status_Code_301" ; Moved Permanently - the target resource has been assigned a new permanent URI #jadn_opts:{"field": 301}
Status_Code /= "Unknown_Status_Code_400" ; Bad Request - the server cannot process the request due to something that is perceived to be a client error (e.g., malformed request syntax.) #jadn_opts:{"field": 400}
Status_Code /= "Unknown_Status_Code_401" ; Unauthorized - the request lacks valid authentication credentials for the target resources or authorization has been refused for the submitted credentials. #jadn_opts:{"field": 401}
Status_Code /= "Unknown_Status_Code_403" ; Forbidden - the server understood the request but refuses to authorize it. #jadn_opts:{"field": 403}
Status_Code /= "Unknown_Status_Code_500" ; Server Error - the server encountered an unexpected condition that prevented it from fulfilling the request. #jadn_opts:{"field": 500}
Status_Code /= "Unknown_Status_Code_501" ; Not Implemented - the server does not support the functionality required to fulfill the request. #jadn_opts:{"field": 501}

artifact = { ; #jadn_opts:{"type": "Record"}
  ? mime_type: bstr, ; Permitted values specified in the IANA Media Types registry #jadn_opts:{"type": "String", "field": 1, "options": {"min": 0}}
  ? unknown: payload, ; choice of literal content or URL to obtain content #jadn_opts:{"type": "payload", "field": 2, "options": {"min": 0}}
  ? hashes: hashes ; Specifies a dictionary of hashes for the contents of the payload #jadn_opts:{"type": "hashes", "field": 3, "options": {"min": 0}}
}

payload = ( ; #jadn_opts:{"type": "Choice"}
  payload_bin: bstr // ; Specifies the data contained in the artifact. #jadn_opts:{"type": "Binary", "field": 1}
  url: uri ; MUST be a valid URL that resolves to the un-encoded content #jadn_opts:{"type": "uri", "field": 2}
)

openc2 = [0*3 Query_Item] ; A target used to query Actuator for its supported capabilities

; Results to be included in response to query openc2 command #jadn_opts:{"type": "Enumerated"}
Query_Item = "versions" ; OpenC2 language versions supported by this actuator #jadn_opts:{"field": 1}
Query_Item /= "profiles" ; List of profiles supported by this actuator #jadn_opts:{"field": 2}
Query_Item /= "schema" ; Definition of the command syntax supported by this actuator #jadn_opts:{"field": 3}

ip_connection = { ; 5-tuple that specifies a tcp/ip connection #jadn_opts:{"type": "Record"}
  ? src_addr: ip_addr, ; source address #jadn_opts:{"type": "ip-addr", "field": 1, "options": {"min": 0}}
  ? src_port: port, ; source TCP/UDP port number #jadn_opts:{"type": "port", "field": 2, "options": {"min": 0}}
  ? dst_addr: ip_addr, ; destination address #jadn_opts:{"type": "ip-addr", "field": 3, "options": {"min": 0}}
  ? dst_port: port, ; destination TCP/UDP port number #jadn_opts:{"type": "port", "field": 4, "options": {"min": 0}}
  ? layer4_protocol: layer4_protocol ; Protocol (IPv4) / Next Header (IPv6) #jadn_opts:{"type": "layer4-protocol", "field": 5, "options": {"min": 0}}
}

; protocol (IPv4) or next header (IPv6) field - any IANA value, RFC 5237 #jadn_opts:{"type": "Enumerated"}
layer4_protocol = "icmp" ; Internet Control Message Protocol - RFC 792 #jadn_opts:{"field": 1}
layer4_protocol /= "tcp" ; Transmission Control Protocol - RFC 793 #jadn_opts:{"field": 6}
layer4_protocol /= "udp" ; User Datagram Protocol - RFC 768 #jadn_opts:{"field": 17}
layer4_protocol /= "sctp" ; Stream Control Transmission Protocol - RFC 4960 #jadn_opts:{"field": 132}

file = [ ; #jadn_opts:{"type": "Map"}
  ? name: bstr, ; The name of the file as defined in the file system #jadn_opts:{"type": "String", "field": 1, "options": {"min": 0}}
  ? path: bstr, ; The absolute path to the location of the file in the file system #jadn_opts:{"type": "String", "field": 2, "options": {"min": 0}}
  ? hashes: hashes ; One or more cryptographic hash codes of the file contents #jadn_opts:{"type": "hashes", "field": 3, "options": {"min": 0}}
]

; #jadn_opts:{"type": "Enumerated"}
Response_Type = "None" ; No response #jadn_opts:{"field": 0}
Response_Type /= "Ack" ; Respond when command received #jadn_opts:{"field": 1}
Response_Type /= "Complete" ; Respond when all aspects of command completed #jadn_opts:{"field": 2}

Process = [ ; #jadn_opts:{"type": "Map"}
  ? pid: int64, ; Process ID of the process #jadn_opts:{"type": "Integer", "field": 1, "options": {"min": 0}}
  ? name: bstr, ; Name of the process #jadn_opts:{"type": "String", "field": 2, "options": {"min": 0}}
  ? cwd: bstr, ; Current working directory of the process #jadn_opts:{"type": "String", "field": 3, "options": {"min": 0}}
  ? executable: file, ; Executable that was executed to start the process #jadn_opts:{"type": "file", "field": 4, "options": {"min": 0}}
  ? parent: Process, ; Process that spawned this one #jadn_opts:{"type": "Process", "field": 5, "options": {"min": 0}}
  ? command_line: bstr ; The full command line invocation used to start this process, including all arguments #jadn_opts:{"type": "String", "field": 6, "options": {"min": 0}}
]

hashes = [ ; Cryptographic Hash values #jadn_opts:{"type": "Map"}
  ? md5: bstr, ; Hex-encoded MD5 hash as defined in RFC3121 #jadn_opts:{"type": "Binary", "field": 1, "options": {"min": 0}}
  ? sha1: bstr, ; Hex-encoded SHA1 hash as defined in RFC3174 #jadn_opts:{"type": "Binary", "field": 4, "options": {"min": 0}}
  ? sha256: bstr ; Hex-encoded SHA256 as defined in RFC6234 #jadn_opts:{"type": "Binary", "field": 6, "options": {"min": 0}}
]

device = [ ; TODO: Add inventory device-id? #jadn_opts:{"type": "Map"}
  ? description: bstr, ; #jadn_opts:{"type": "String", "field": 1, "options": {"min": 0}}
  ? device_type: bstr, ; #jadn_opts:{"type": "String", "field": 2, "options": {"min": 0}}
  ? manufacturer: bstr, ; #jadn_opts:{"type": "String", "field": 3, "options": {"min": 0}}
  ? model: bstr, ; #jadn_opts:{"type": "String", "field": 4, "options": {"min": 0}}
  ? serial_number: bstr, ; #jadn_opts:{"type": "String", "field": 5, "options": {"min": 0}}
  ? firmware_version: bstr, ; #jadn_opts:{"type": "String", "field": 6, "options": {"min": 0}}
  ? system_details: bstr ; #jadn_opts:{"type": "String", "field": 7, "options": {"min": 0}}
]

; Custom Defined Types
command_id = bstr ; Uniquely identifies a particular command - TBD syntax
date_time = bstr ; RFC 3339 date-time
duration = bstr ; RFC 3339 / ISO 8601 duration
domain_name = bstr ; Domain name, RFC 1034, section 3.5
email_addr = bstr ; Email address, RFC 5322, section 3.4.1
ip_addr = bstr ; IPv4 or IPv6 address
ipv4_addr = bstr ; IPv4 address or range in CIDR notation, RFC 2673, section 3.2
ipv6_addr = bstr ; IPv6 address or range, RFC 4291, section 2.2
mac_addr = bstr ; 48 bit Media Access Code address
port = bstr ; Service Name or Transport Protocol Port Number, RFC 6335
version = bstr ; Version string - TBD syntax
uri = bstr ; Uniform Resource Identifier
