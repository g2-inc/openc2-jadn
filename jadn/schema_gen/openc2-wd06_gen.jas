-- Generated from schema\openc2-wd06.jadn, Fri Jun  1 16:32:15 2018

/*
module:        oasis-open.org/openc2/v1.0/openc2-lang
title:         OpenC2 Language Objects
version:       wd06
description:   Datatypes that define the content of OpenC2 commands and
               responses.
imports:       [[u'slpff', u'oasis-open.org/openc2/v1.0/ap-slpff'], [u'jadn', u'oasis-open.org/openc2/v1.0/jadn']]
exports:       [u'OpenC2-Command', u'OpenC2-Response', u'OpenC2-Message']
*/

OpenC2-Command ::= RECORD {    -- The OpenC2 Command describes an action performed on a target. It can be directive or descriptive depending on the context.
    action       Action,    -- The task or activity to be performed (i.e., the 'verb')
    target       Target,    -- The object of the action. The action is performed on the target
    actuator     Actuator OPTIONAL,    -- The subject of the action. The actuator executes the action on the target
    args         Args OPTIONAL,    -- Additional information that applies to the command
    id           Command-ID OPTIONAL     -- Identifier used to link responses to a command
}

Action ::= ENUMERATED {
    scan         (1),    -- Systematic examination of some aspect of the target entity or its environment in order to obtain information.
    locate       (2),    -- Find the target object physically, logically, functionally, or by organization.
    query        (3),    -- Initiate a request for information.
    report       (4),    -- Task an entity to provide information to a designated recipient.
    notify       (5),    -- Set an entity's alerting preferences.
    deny         (6),    -- Prevent a certain event or action from completion, such as preventing a flow from reaching a destination or preventing access.
    contain      (7),    -- Isolate a file, process, or entity so that it cannot modify or access other assets or processes.
    allow        (8),    -- Permit access to or execution of a target.
    start        (9),    -- Initiate a process, application, system, or activity.
    stop         (10),    -- Halt a system or end an activity.
    restart      (11),    -- Stop then start a system or activity.
    pause        (12),    -- Cease a system or activity while maintaining state.
    resume       (13),    -- Start a system or activity from a paused state.
    cancel       (14),    -- Invalidate a previously issued action.
    set          (15),    -- Change a value, configuration, or state of a managed entity.
    update       (16),    -- Instruct a component to retrieve, install, process, and operate in accordance with a software update, reconfiguration, or other update.
    move         (17),    -- Change the location of a file, subnet, network, or process.
    redirect     (18),    -- Change the flow of traffic to a destination other than its original destination.
    create       (19),    -- Add a new entity of a known type (e.g., data, files, directories).
    delete       (20),    -- Remove an entity (e.g., data, files, flows.
    snapshot     (21),    -- Record and store the state of a target at an instant in time.
    detonate     (22),    -- Execute and observe the behavior of a target (e.g., file, hyperlink) in an isolated environment.
    restore      (23),    -- Return the system to a previously known state.
    save         (24),    -- Commit data or system state to memory.
    throttle     (25),    -- Adjust the rate of a process, function, or activity.
    delay        (26),    -- Stop or hold up an activity or data transmittal.
    substitute   (27),    -- Replace all or part of the data, content or payload.
    copy         (28),    -- Duplicate a file or data flow.
    sync         (29),    -- Synchronize a sensor or actuator with other system components.
    investigate  (30),    -- Task the recipient to aggregate and report information as it pertains to a security event or incident.
    mitigate     (31),    -- Task the recipient to circumvent a problem without necessarily eliminating the vulnerability or attack point.
    remediate    (32)     -- Task the recipient to eliminate a vulnerability or attack point.
}

Target ::= CHOICE {    -- OpenC2 Target datatypes
    artifact              [1] artifact,    -- An array of bytes representing a file-like object or a link to that object.
    command               [2] command-id,    -- A reference to a previously issued OpenC2 command
    device                [3] device,
    directory             [4] directory,
    disk                  [5] disk,
    disk_partition        [6] disk-partition,
    domain_name           [7] domain-name,
    email_addr            [8] email-addr,
    email_message         [9] email-message,
    file                  [10] file,
    ipv4_addr             [11] ipv4-addr,
    ipv6_addr             [12] ipv6-addr,
    mac_addr              [13] mac-addr,
    memory                [14] memory,
    ip_connection         [15] ip-connection,
    openc2                [16] openc2,    -- OpenC2 - query actuator for supported capabilities, negotiate connection
    process               [17] process,
    software              [18] software,
    uri                   [19] uri,
    user_account          [20] user-account,
    user_session          [21] user-session,
    volume                [22] volume,
    windows_registry_key  [23] windows-registry-key,
    x509_certificate      [24] x509-certificate,
    slpff                 [1024] slpff:Target     -- Target imported from the Stateless Packet Filter Firewall profile
}

Actuator ::= CHOICE {
    generic      [1] ActuatorSpecifiers,
    slpff        [1024] slpff:Specifiers     -- Specifiers as defined in the Stateless Packet Filtering Firewall profile, oasis-open.org/openc2/v1.0/ap-slpff
}

ActuatorSpecifiers ::= MAP {
    actuator_id  [1] uri OPTIONAL,
    asset_id     [2] STRING OPTIONAL
}

Args ::= MAP {
    start_time          [1] Date-Time OPTIONAL,    -- The specific date/time to initiate the action
    end_time            [2] Date-Time OPTIONAL,    -- The specific date/time to terminate the action
    duration            [3] Duration OPTIONAL,    -- The length of time for an action to be in effect
    response_requested  [4] Response-Type OPTIONAL,    -- The type of response required for the action
    slpff               [1024] slpff:Args OPTIONAL     -- Command arguments defined in the Stateless Packet Filtering Firewall profile
}

OpenC2-Response ::= RECORD {
    id           Command-ID,    -- Id of the ommand that induced this response
    status       Status-Code,    -- An integer status code
    status_text  STRING OPTIONAL,    -- A free-form human-readable description of the response status
    *            Results     -- Data or extended status information that was requested from an OpenC2 command
}

Status-Code ::= ENUMERATED {
    Processing         (102),    -- An interim response used to inform the client that the server has accepted the request but not yet completed it.
    OK                 (200),    -- The request has succeeded.
    Moved Permanently  (301),    -- The target resource has been assigned a new permanent URI
    Bad Request        (400),    -- The server cannot process the request due to something that is perceived to be a client error (e.g., malformed request syntax.)
    Unauthorized       (401),    -- The request lacks valid authentication credentials for the target resources or authorization has been refused for the submitted credentials.
    Forbidden          (403),    -- The server understood the request but refuses to authorize it.
    Server Error       (500),    -- The server encountered an unexpected condition that prevented it from fulfilling the request.
    Not Implemented    (501)     -- The server does not support the functionality required to fulfill the request.
}

artifact ::= RECORD {
    mime_type    STRING OPTIONAL,    -- Permitted values specified in the IANA Media Types registry
    *            payload OPTIONAL,    -- choice of literal content or URL to obtain content
    hashes       hashes OPTIONAL     -- Specifies a dictionary of hashes for the contents of the payload
}

payload ::= CHOICE {
    payload_bin  [1] BINARY,    -- Specifies the data contained in the artifact.
    url          [2] uri     -- MUST be a valid URL that resolves to the un-encoded content
}

openc2 ::= ARRAY_OF    -- A target used to query Actuator for its supported capabilities

Query-Item ::= ENUMERATED {    -- Results to be included in response to query openc2 command
    versions     (1),    -- OpenC2 language versions supported by this actuator
    profiles     (2),    -- List of profiles supported by this actuator
    schema       (3)     -- Definition of the command syntax supported by this actuator
}

ip-connection ::= RECORD {    -- 5-tuple that specifies a tcp/ip connection
    src_addr         ip-addr OPTIONAL,    -- source address
    src_port         port OPTIONAL,    -- source TCP/UDP port number
    dst_addr         ip-addr OPTIONAL,    -- destination address
    dst_port         port OPTIONAL,    -- destination TCP/UDP port number
    layer4_protocol  layer4-protocol OPTIONAL     -- Protocol (IPv4) / Next Header (IPv6)
}

layer4-protocol ::= ENUMERATED {    -- protocol (IPv4) or next header (IPv6) field - any IANA value, RFC 5237
    icmp         (1),    -- Internet Control Message Protocol - RFC 792
    tcp          (6),    -- Transmission Control Protocol - RFC 793
    udp          (17),    -- User Datagram Protocol - RFC 768
    sctp         (132)     -- Stream Control Transmission Protocol - RFC 4960
}

file ::= MAP {
    name         [1] STRING OPTIONAL,    -- The name of the file as defined in the file system
    path         [2] STRING OPTIONAL,    -- The absolute path to the location of the file in the file system
    hashes       [3] hashes OPTIONAL     -- One or more cryptographic hash codes of the file contents
}

Response-Type ::= ENUMERATED {
    None         (0),    -- No response
    Ack          (1),    -- Respond when command received
    Complete     (2)     -- Respond when all aspects of command completed
}

Process ::= MAP {
    pid           [1] INTEGER OPTIONAL,    -- Process ID of the process
    name          [2] STRING OPTIONAL,    -- Name of the process
    cwd           [3] STRING OPTIONAL,    -- Current working directory of the process
    executable    [4] File OPTIONAL,    -- Executable that was executed to start the process
    parent        [5] Process OPTIONAL,    -- Process that spawned this one
    command_line  [6] STRING OPTIONAL     -- The full command line invocation used to start this process, including all arguments
}

hashes ::= MAP {    -- Cryptographic Hash values
    md5          [1] BINARY OPTIONAL,    -- Hex-encoded MD5 hash as defined in RFC3121
    sha1         [4] BINARY OPTIONAL,    -- Hex-encoded SHA1 hash as defined in RFC3174
    sha256       [6] BINARY OPTIONAL     -- Hex-encoded SHA256 as defined in RFC6234
}

device ::= MAP {    -- TODO: Add inventory device-id?
    description       [1] STRING OPTIONAL,
    device_type       [2] STRING OPTIONAL,
    manufacturer      [3] STRING OPTIONAL,
    model             [4] STRING OPTIONAL,
    serial_number     [5] STRING OPTIONAL,
    firmware_version  [6] STRING OPTIONAL,
    system_details    [7] STRING OPTIONAL
}

command-id ::= STRING    -- Uniquely identifies a particular command - TBD syntax

date-time ::= STRING    -- RFC 3339 date-time

duration ::= STRING    -- RFC 3339 / ISO 8601 duration

domain-name ::= STRING    -- Domain name, RFC 1034, section 3.5

email-addr ::= STRING    -- Email address, RFC 5322, section 3.4.1

ip-addr ::= STRING    -- IPv4 or IPv6 address

ipv4-addr ::= STRING    -- IPv4 address or range in CIDR notation, RFC 2673, section 3.2

ipv6-addr ::= STRING    -- IPv6 address or range, RFC 4291, section 2.2

mac-addr ::= STRING    -- 48 bit Media Access Code address

port ::= STRING    -- Service Name or Transport Protocol Port Number, RFC 6335

version ::= STRING    -- Version string - TBD syntax

uri ::= STRING    -- Uniform Resource Identifier
